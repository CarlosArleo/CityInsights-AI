rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership of a project
    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      // Allow a user to get a single project document if they are the owner.
      allow get: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Allow a user to list projects only if they are querying for their own projects.
      // This is crucial for the dashboard view.
      allow list: if request.auth != null && request.query.where.get("ownerId") == request.auth.uid;
      
      // Allow a user to create a project if the new document's ownerId is their own UID.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      
      // Allow a user to update or delete a project if they are the owner.
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Rules for the 'files' sub-collection
      match /files/{fileId} {
        // Allow read, write, and delete operations on files
        // only if the user is the owner of the parent project.
        allow read, write, delete: if request.auth != null && isProjectOwner(projectId);
      }

      // Rules for the 'reviews' sub-collection
      match /reviews/{reviewId} {
         // Allow read, write, and delete operations on reviews
         // only if the user is the owner of the parent project.
        allow read, write, delete: if request.auth != null && isProjectOwner(projectId);
      }
    }
  }
}
