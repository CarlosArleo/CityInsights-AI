rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      // Allow reading a single project or listing projects only if the user is the owner.
      // The list rule ensures that any query on the projects collection MUST include a filter for ownerId.
      allow get: if request.auth != null && resource.data.ownerId == request.auth.uid;
      allow list: if request.auth != null && request.query.resource.data.ownerId == request.auth.uid;

      // Allow creating a project only if the user is setting themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Allow updating a project only if the user is the owner.
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Allow deleting a project only if the user is the owner.
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Rules for the 'files' sub-collection
      match /files/{fileId} {
        // A user can read or write a file document if they own the parent project.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      }

      // Rules for the 'reviews' sub-collection
      match /reviews/{reviewId} {
        // A user can read or write a review document if they own the parent project.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
      }
    }

    // Rules for collection group queries. These are important for AI flows and other cross-project queries.
    match /{path=**}/files/{fileId} {
        // Allow read/write access to a file if the user's ID matches the ownerId on the file document itself.
        allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    match /{path=**}/reviews/{reviewId} {
       // Allow read/write access to a review if the user's ID matches the ownerId on the review document itself.
       allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
  }
}
